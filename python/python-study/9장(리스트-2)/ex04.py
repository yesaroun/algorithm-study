# 리스트 함축
# 리스트 함축은 수학에서 집합을 정의하는 것과 매우 유사하다.

# 일반적 코드(리스트 함축을 사용하지 않은 경우)
squres = []
for x in range(1, 11):
    squres.append(x**2)
print(squres)
#--==>> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# 리스트 함축 개념을 이용하여 위와 똑같은 결과 출력하기
# 위의 일반적인 코드보다 코드가 간결하고 쉽게 리스트를 생성을 할 수가 있다.
# 리스트 함축 문법 : 출력식 반복문 조건문(옵션)
li_squares = [x**2 for x in range(1, 11)]
print(li_squares)
#--==>> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

# 조건이 붙는 리스트 함축(조건 if를 사용하겠다.)
# 조건식이 참이 되는 것만 리스트 요소로 생성시킨다.
odd_list = [x for x in range(1, 21) if x % 2 == 1]
print("홀수 : ", odd_list)
#--==>> 홀수 :  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]

even_list = [x for x in range(1, 21) if x % 2 == 0]
print("짝수 : ", even_list)
#--==>> 짝수 :  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

# 반복문 2번을 사용하여 구구단의 값을 출력해보자
gugudan_list = [i * j for i in range(1, 10)
                      for j in range(1, 10)]
print("구구단의 값 : ", gugudan_list)
#--==>> 구구단의 값 :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 4, 6, 8, 10, 12, 14, 16, 18, 3, 6, 9, 12, 15, 18, 21, 24, 27, 4, 8, 12, 16, 20, 24, 28, 32, 36, 5, 10, 15, 20, 25, 30, 35, 40, 45, 6, 12, 18, 24, 30, 36, 42, 48, 54, 7, 14, 21, 28, 35, 42, 49, 56, 63, 8, 16, 24, 32, 40, 48, 56, 64, 72, 9, 18, 27, 36, 45, 54, 63, 72, 81]