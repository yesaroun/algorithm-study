# 튜플(tuple)에 대한 실습
# 튜플의 특징 : 리스트에 반하여 변경이 불가능한 객체이다.
# 리스트에 비해서 속도가 빠르다. 튜플도 시퀀스의 일종이다.
# +, *, min(), max(), len(), cmp(), tuple() 연산과 내장함수가 사용 가능하다.
# 리스트는 대괄호 [] 요소를 감싸지만, 튜플은 ()요소를 감싼다.
colors = ('red', 'blue', 'yellow')
print(colors)
print(type(colors))
#--==>>
'''
('red', 'blue', 'yellow')
<class 'tuple'>
'''

numbers = (1, 2, 3, 4, 5)
print(numbers)
#--==>> (1, 2, 3, 4, 5)

# 튜플도 리스트와 마찬가지로 여러가지 자료형을 섞어서 생성할 수 있다.
tuple1 = (1, 2.2, "hi")
print(tuple1)
#--==>> (1, 2.2, 'hi')

# 공백 튜플 만들기
tuple2 = ()
# tuple2[0] = 100
#--==>> TypeError: 'tuple' object does not support item assignment
# 튜플은 한번 생성되어지만 더 이상 추가, 삭제, 수정이 불가

# 하나의 값만을 가지는 튜플을 생성할 때는 반드시 요소 뒤에 , 를 적어 줘야 한다.
# 그렇지 아니하면 그냥 정수나 문자열로 인식한다.
tuple3 = (10,)
print(tuple3)

li = [1, 2, 3, 4, 5]
# 리스트를 내장함수인 tuple()로 tuple로 만들 수가 있다.
tuple4 = tuple(li)
print(tuple4)
#--==>> (1, 2, 3, 4, 5)

# 튜플도 리스트와 마찬가지로 내장 튜플을 가질 수 있다.
t1 = (1, 2.2, '반가워요')
t2 = t1, (3.3, 4.5, 5)
print(t2)
#--==>> ((1, 2.2, '반가워요'), (3.3, 4.5, 5))
print("t1의 주소 : ", id(t1))
print("t2의 주소 : ", id(t2))
#--==>>
'''
t1의 주소 :  4372793344
t2의 주소 :  4372793984
'''

# 튜플도 시퀀스의 일종이므로 아래와 같이 내장함수 사용이 가능하다.
t4 = (1, 2, 3, 'hi')
print("t4의 길이 : ", len(t4))
#--==>> t4의 길이 :  4

# 서로 다른 데이터 타입이 튜퓰의 요소로 존재한다면 비교가 되질 않는다.
# print(max(t4))

t6 = (1, 2, 3, 'hi')
t7 = t6 + t6
print(t7)
#--==>> (1, 2, 3, 'hi', 1, 2, 3, 'hi')
# 튜플은 + 연산이 가능하다.(접합)

if 2 in t6:
    print("t6에는 2가 존재")

for x in t6:
    print(x, end=" ")
#--==>> 1 2 3 hi

print()
print("---------------------")

#인덱싱
t10 = (1, 2.2, 3, 'hi', 'hello', 5.5)
print(t10[4])
#--==>> hello
# 슬라이싱
print(t10[4:6])
print(t10[-3:-1])
#--==>> ('hi', 'hello')


# dir() 함수 사용
t1 = (1, 2.2, 3)
t2 = (1, 2.2, 3)
# dir() 함수는 사용할 수 있는 함수들을 출력을 해주는 역할을 하는 함수이다.
print(dir(t1))

print(t1.__eq__(t2))
#--==>> True
# 튜플을 비교를 하고자 한다면 __eq__()를 사용하도록 하자